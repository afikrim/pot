// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v0.0.6
// - protoc             v5.28.3
// source: blog/blog.proto

package blog

import (
	context "context"
	fmt "fmt"
	pot "github.com/afikrim/pot"
	binder "github.com/afikrim/pot/binder"
	errors "github.com/afikrim/pot/errors"
	option "github.com/afikrim/pot/option"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the pot package it is being compiled against.
var _ = new(context.Context)
var _ = new(http.Server)
var _ = fmt.Sprint()
var _ = errors.ErrGeneralBadRequest
var _ = new(pot.ServiceDescriptor)
var _ = new(binder.RequestDecoder)
var _ = new(option.BinderOptions)

const (
	Operation_BlogService_CreateBlog = "/blog.BlogService/CreateBlog"
	Operation_BlogService_DeleteBlog = "/blog.BlogService/DeleteBlog"
	Operation_BlogService_ReadBlog   = "/blog.BlogService/ReadBlog"
	Operation_BlogService_UpdateBlog = "/blog.BlogService/UpdateBlog"
	BlogService_CreateBlog_Method    = "POST"
	BlogService_CreateBlog_Path      = "/v1/blog"
	BlogService_DeleteBlog_Method    = "DELETE"
	BlogService_DeleteBlog_Path      = "/v1/blog/{id}"
	BlogService_ReadBlog_Method      = "GET"
	BlogService_ReadBlog_Path        = "/v1/blog/{id}"
	BlogService_UpdateBlog_Method    = "PUT"
	BlogService_UpdateBlog_Path      = "/v1/blog/{id}"
)

type BlogServiceHTTPServer interface {
	CreateBlog(ctx context.Context, in *CreateBlogRequest) (*CreateBlogResponse, error)
	DeleteBlog(ctx context.Context, in *DeleteBlogRequest) (*emptypb.Empty, error)
	ReadBlog(ctx context.Context, in *ReadBlogRequest) (*ReadBlogResponse, error)
	UpdateBlog(ctx context.Context, in *UpdateBlogRequest) (*UpdateBlogResponse, error)
}

func RegisterBlogServiceHTTPServer(srv BlogServiceHTTPServer) http.Handler {
	return pot.RegisterService(&_BlogService_HTTP_ServiceDesc, srv)
}

func _BlogService_CreateBlog0_HTTP_Handler(ctx context.Context, srv interface{}, dec pot.DecoderFunc, middleware pot.MiddlewareFunc) (interface{}, error) {
	in := new(CreateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if middleware == nil {
		return srv.(BlogServiceHTTPServer).CreateBlog(ctx, in)
	}
	h := middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceHTTPServer).CreateBlog(ctx, req.(*CreateBlogRequest))
	})
	return h(ctx, in)
}

func _BlogService_ReadBlog0_HTTP_Handler(ctx context.Context, srv interface{}, dec pot.DecoderFunc, middleware pot.MiddlewareFunc) (interface{}, error) {
	in := new(ReadBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if middleware == nil {
		return srv.(BlogServiceHTTPServer).ReadBlog(ctx, in)
	}
	h := middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceHTTPServer).ReadBlog(ctx, req.(*ReadBlogRequest))
	})
	return h(ctx, in)
}

func _BlogService_UpdateBlog0_HTTP_Handler(ctx context.Context, srv interface{}, dec pot.DecoderFunc, middleware pot.MiddlewareFunc) (interface{}, error) {
	in := new(UpdateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if middleware == nil {
		return srv.(BlogServiceHTTPServer).UpdateBlog(ctx, in)
	}
	h := middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceHTTPServer).UpdateBlog(ctx, req.(*UpdateBlogRequest))
	})
	return h(ctx, in)
}

func _BlogService_DeleteBlog0_HTTP_Handler(ctx context.Context, srv interface{}, dec pot.DecoderFunc, middleware pot.MiddlewareFunc) (interface{}, error) {
	in := new(DeleteBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if middleware == nil {
		return srv.(BlogServiceHTTPServer).DeleteBlog(ctx, in)
	}
	h := middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceHTTPServer).DeleteBlog(ctx, req.(*DeleteBlogRequest))
	})
	return h(ctx, in)
}

var _BlogService_HTTP_ServiceDesc = pot.ServiceDescriptor{
	ServiceName: "blog.BlogService",
	HandlerType: (*BlogServiceHTTPServer)(nil),
	Methods: []pot.MethodDescriptor{
		{
			MethodName: "CreateBlog",
			HttpMethod: "POST",
			HttpPath:   "/v1/blog",
			Handler:    _BlogService_CreateBlog0_HTTP_Handler,
		},
		{
			MethodName: "ReadBlog",
			HttpMethod: "GET",
			HttpPath:   "/v1/blog/{id}",
			Handler:    _BlogService_ReadBlog0_HTTP_Handler,
		},
		{
			MethodName: "UpdateBlog",
			HttpMethod: "PUT",
			HttpPath:   "/v1/blog/{id}",
			Handler:    _BlogService_UpdateBlog0_HTTP_Handler,
		},
		{
			MethodName: "DeleteBlog",
			HttpMethod: "DELETE",
			HttpPath:   "/v1/blog/{id}",
			Handler:    _BlogService_DeleteBlog0_HTTP_Handler,
		},
	},
}

type BlogServiceHTTPClient interface {
	CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...option.BinderOption) (*CreateBlogResponse, error)
	DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...option.BinderOption) (*emptypb.Empty, error)
	ReadBlog(ctx context.Context, in *ReadBlogRequest, opts ...option.BinderOption) (*ReadBlogResponse, error)
	UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...option.BinderOption) (*UpdateBlogResponse, error)
}

type BlogServiceHTTPClientImpl struct {
	baseUrl string
	client  *http.Client
}

func NewBlogServiceHTTPClient(opts ...option.ClientOption) BlogServiceHTTPClient {
	options := option.NewClientOptions(opts...)
	return &BlogServiceHTTPClientImpl{
		baseUrl: options.BaseURL,
		client: &http.Client{
			Timeout: options.Timeout,
		},
	}
}

func (c *BlogServiceHTTPClientImpl) CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...option.BinderOption) (*CreateBlogResponse, error) {
	out := new(CreateBlogResponse)
	url := fmt.Sprintf("%s%s", c.baseUrl, BlogService_CreateBlog_Path)
	req, err := http.NewRequest(BlogService_CreateBlog_Method, url, nil)
	if err != nil {
		return nil, err
	}
	opts = append(opts, option.WithOperation(Operation_BlogService_CreateBlog))
	if err = binder.NewRequestEncoder(req, opts...).Bind(in); err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	res, err := c.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	dec := &binder.ResponseDecoder{Response: res}
	if err := errors.ErrorMap[res.StatusCode]; err != nil {
		customErr := new(errors.Error)
		if err := dec.BindBody(customErr); err != nil {
			return nil, err
		}
		return nil, customErr
	}
	if err := dec.BindBody(out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlogServiceHTTPClientImpl) DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...option.BinderOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	url := fmt.Sprintf("%s%s", c.baseUrl, BlogService_DeleteBlog_Path)
	req, err := http.NewRequest(BlogService_DeleteBlog_Method, url, nil)
	if err != nil {
		return nil, err
	}
	opts = append(opts, option.WithOperation(Operation_BlogService_DeleteBlog))
	if err = binder.NewRequestEncoder(req, opts...).Bind(in); err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	res, err := c.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	dec := &binder.ResponseDecoder{Response: res}
	if err := errors.ErrorMap[res.StatusCode]; err != nil {
		customErr := new(errors.Error)
		if err := dec.BindBody(customErr); err != nil {
			return nil, err
		}
		return nil, customErr
	}
	if err := dec.BindBody(out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlogServiceHTTPClientImpl) ReadBlog(ctx context.Context, in *ReadBlogRequest, opts ...option.BinderOption) (*ReadBlogResponse, error) {
	out := new(ReadBlogResponse)
	url := fmt.Sprintf("%s%s", c.baseUrl, BlogService_ReadBlog_Path)
	req, err := http.NewRequest(BlogService_ReadBlog_Method, url, nil)
	if err != nil {
		return nil, err
	}
	opts = append(opts, option.WithOperation(Operation_BlogService_ReadBlog))
	if err = binder.NewRequestEncoder(req, opts...).Bind(in); err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	res, err := c.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	dec := &binder.ResponseDecoder{Response: res}
	if err := errors.ErrorMap[res.StatusCode]; err != nil {
		customErr := new(errors.Error)
		if err := dec.BindBody(customErr); err != nil {
			return nil, err
		}
		return nil, customErr
	}
	if err := dec.BindBody(out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *BlogServiceHTTPClientImpl) UpdateBlog(ctx context.Context, in *UpdateBlogRequest, opts ...option.BinderOption) (*UpdateBlogResponse, error) {
	out := new(UpdateBlogResponse)
	url := fmt.Sprintf("%s%s", c.baseUrl, BlogService_UpdateBlog_Path)
	req, err := http.NewRequest(BlogService_UpdateBlog_Method, url, nil)
	if err != nil {
		return nil, err
	}
	opts = append(opts, option.WithOperation(Operation_BlogService_UpdateBlog))
	if err = binder.NewRequestEncoder(req, opts...).Bind(in); err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	res, err := c.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()
	dec := &binder.ResponseDecoder{Response: res}
	if err := errors.ErrorMap[res.StatusCode]; err != nil {
		customErr := new(errors.Error)
		if err := dec.BindBody(customErr); err != nil {
			return nil, err
		}
		return nil, customErr
	}
	if err := dec.BindBody(out); err != nil {
		return nil, err
	}
	return out, nil
}
